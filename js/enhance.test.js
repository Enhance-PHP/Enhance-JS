// Generated by CoffeeScript 1.3.1
(function() {
  var AssertTests, MockRepositoryTests;

  MockRepositoryTests = (function() {

    MockRepositoryTests.name = 'MockRepositoryTests';

    function MockRepositoryTests() {}

    MockRepositoryTests.generateMockWithExpectationMetExpectWorks = function() {
      var mock, result;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('x', 2).returns(8).times(1);
      result = mock.someMethod('x', 2);
      mock.verifyExpectations();
      return Assert.areIdentical(8, result);
    };

    MockRepositoryTests.generateMockWithNoArgumentsExpectWorks = function() {
      var mock, result;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').returns(8).times(1);
      result = mock.someMethod('x', 2);
      mock.verifyExpectations();
      return Assert.areIdentical(8, result);
    };

    MockRepositoryTests.generateMockWithNoTimesExpectWorks = function() {
      var mock, result;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').returns(8);
      mock.someMethod('x', 2);
      result = mock.someMethod('x', 2);
      mock.verifyExpectations();
      return Assert.areIdentical(8, result);
    };

    MockRepositoryTests.generateMockWithNoReturnExpectNull = function() {
      var mock, result;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod');
      mock.someMethod('x', 2);
      result = mock.someMethod('x', 2);
      mock.verifyExpectations();
      return Assert.isNull(result);
    };

    MockRepositoryTests.generateMockWithExpectationWrongParametersExpectFails = function() {
      var mock;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('x', 2).returns(8).times(1);
      mock.someMethod('x', 3);
      return Assert.doesThrow(mock.verifyExpectations);
    };

    MockRepositoryTests.generateMockWithExpectationWrongNumberOfCallsExpectFails = function() {
      var mock;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('x', 2).returns(8).times(1);
      mock.someMethod('x', 2);
      mock.someMethod('x', 2);
      return Assert.doesThrow(mock.verifyExpectations);
    };

    MockRepositoryTests.generateMockWithExpectationNoCallsExpectFails = function() {
      var mock;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('x', 2).returns(8).times(1);
      return Assert.doesThrow(mock.verifyExpectations);
    };

    MockRepositoryTests.generateMockThatThrowsExceptionExpectException = function() {
      var mock;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('a', 3).throwsException('An error').times(1);
      return Assert.doesThrow(mock.someMethod, ['a', 3]);
    };

    MockRepositoryTests.generateStubWithNoVerificationExpectWorks = function() {
      var mock, result;
      mock = MockRepository.generateMock().methods('someMethod');
      mock.expect().method('someMethod').withArguments('x', 2).returns(8).times(0);
      result = mock.someMethod('x', 2);
      return Assert.areIdentical(8, result);
    };

    return MockRepositoryTests;

  })();

  AssertTests = (function() {

    AssertTests.name = 'AssertTests';

    function AssertTests() {}

    AssertTests.areIdenticalWithIdenticalNumbersExpectPass = function() {
      return Assert.areIdentical(2, 2);
    };

    AssertTests.areIdenticalWithDifferentNumbersExpectFail = function() {
      return Assert.doesThrow(Assert.areIdentical, [2, 3]);
    };

    AssertTests.areIdenticalWithDifferentTypesExpectFail = function() {
      return Assert.doesThrow(Assert.areIdentical, [2, '2']);
    };

    AssertTests.areNotIdenticalWithIdenticalNumbersExpectFail = function() {
      return Assert.doesThrow(Assert.areNotIdentical, [4, 4]);
    };

    AssertTests.areNotIdenticalWithDifferentNumbersExpectPass = function() {
      return Assert.areNotIdentical(4, 1);
    };

    AssertTests.areNotIdenticalWithDifferentTypesExpectPass = function() {
      return Assert.areNotIdentical(4, '4');
    };

    AssertTests.isTrueWithTrueExpectPass = function() {
      return Assert.isTrue(true);
    };

    AssertTests.isTrueWithFalseExpectFail = function() {
      return Assert.doesThrow(Assert.isTrue, [false]);
    };

    AssertTests.isTrueWithStringExpectFail = function() {
      return Assert.doesThrow(Assert.isTrue, ['true']);
    };

    AssertTests.isTrueWith1ExpectFail = function() {
      return Assert.doesThrow(Assert.isTrue, [1]);
    };

    AssertTests.isFalseWithTrueExpectPass = function() {
      return Assert.isFalse(false);
    };

    AssertTests.isFalseWithFalseExpectFail = function() {
      return Assert.doesThrow(Assert.isFalse, [true]);
    };

    AssertTests.isFalseWithStringExpectFail = function() {
      return Assert.doesThrow(Assert.isFalse, ['false']);
    };

    AssertTests.isFalseWith0ExpectFail = function() {
      return Assert.doesThrow(Assert.isFalse, [0]);
    };

    AssertTests.isTruthyWithTrueExpectPass = function() {
      return Assert.isTruthy(true);
    };

    AssertTests.isTruthyWith1ExpectPass = function() {
      return Assert.isTruthy(1);
    };

    AssertTests.isTruthyWithStringExpectPass = function() {
      return Assert.isTruthy('x');
    };

    AssertTests.isTruthyWithNumberExpectPass = function() {
      return Assert.isTruthy(654);
    };

    AssertTests.isTruthyWithObjectExpectPass = function() {
      return Assert.isTruthy({});
    };

    AssertTests.isTruthyWith0ExpectFail = function() {
      return Assert.doesThrow(Assert.isTruthy, [0]);
    };

    AssertTests.isTruthyWithNullExpectFail = function() {
      return Assert.doesThrow(Assert.isTruthy, [null]);
    };

    AssertTests.isTruthyWithUnassignedExpectFail = function() {
      return Assert.doesThrow(Assert.isTruthy, [null]);
    };

    AssertTests.isTruthyWithEmptyStringExpectFail = function() {
      return Assert.doesThrow(Assert.isTruthy, ['']);
    };

    AssertTests.isFalseyWithFalseExpectPass = function() {
      return Assert.isFalsey(false);
    };

    AssertTests.isFalseyWith0ExpectPass = function() {
      return Assert.isFalsey(0);
    };

    AssertTests.isFalseyWithEmptyStringExpectPass = function() {
      return Assert.isFalsey('');
    };

    AssertTests.isFalseyWithNullExpectPass = function() {
      return Assert.isFalsey(null);
    };

    AssertTests.isFalseyWithTrueExpectFail = function() {
      return Assert.doesThrow(Assert.isFalsey, [true]);
    };

    AssertTests.isFalseyWith1ExpectFail = function() {
      return Assert.doesThrow(Assert.isFalsey, [1]);
    };

    AssertTests.isFalseyWithStringExpectFail = function() {
      return Assert.doesThrow(Assert.isFalsey, ['x']);
    };

    AssertTests.isFalseyWithObjectExpectFail = function() {
      return Assert.doesThrow(Assert.isFalsey, [{}]);
    };

    AssertTests.isNullWithNullExpectPass = function() {
      return Assert.isNull(null);
    };

    AssertTests.isNullWithValueExpectFail = function() {
      return Assert.doesThrow(Assert.isNull, [{}]);
    };

    AssertTests.containsWithMatchExpectPass = function() {
      return Assert.contains('Hello', 'Hello World');
    };

    AssertTests.containsWithIncorrectCaseExpectFail = function() {
      return Assert.doesThrow(Assert.contains, ['Hello', 'hello world']);
    };

    AssertTests.containsWithNoMatchCaseExpectFail = function() {
      return Assert.doesThrow(Assert.contains, ['Hello', 'Hi World']);
    };

    AssertTests.notContainsWithNoMatchExpectPass = function() {
      return Assert.notContains('Hello', 'Hi World');
    };

    AssertTests.notContainsWithIncorrectCaseExpectPass = function() {
      return Assert.notContains('Hello', 'hello World');
    };

    AssertTests.notContainsWithMatchExpectFail = function() {
      return Assert.doesThrow(Assert.notContains, ['Hello', 'Hello World']);
    };

    AssertTests.doesThrowWithExceptionExpectPass = function() {
      var mockFunction;
      mockFunction = function() {
        throw 'Exception';
      };
      return Assert.doesThrow(mockFunction);
    };

    AssertTests.doesThrowWithNoExceptionExpectFail = function() {
      var mockFunction;
      mockFunction = function() {
        return '';
      };
      return Assert.doesThrow(function() {
        return Assert.doesThrow(mockFunction);
      });
    };

    AssertTests.failExpectFail = function() {
      return Assert.doesThrow(Assert.fail);
    };

    return AssertTests;

  })();

  Enhance.setLanguage(Enhance.TextEn).discoverTests(MockRepositoryTests).discoverTests(AssertTests).runTests();

}).call(this);
